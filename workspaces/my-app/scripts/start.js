'use strict';

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
    throw err;
});

const fs = require('fs');
const chalk = require('react-dev-utils/chalk');
const { choosePort, createCompiler, prepareUrls } = require('react-dev-utils/WebpackDevServerUtils');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const openBrowser = require('react-dev-utils/openBrowser');
const paths = require('../config/paths');
const configFactory = require('../config/webpack.config');
const createDevServerConfig = require('../config/webpackDevServer.config');

const useYarn = true;
const isInteractive = process.stdout.isTTY;

const outputFile = paths.appBundleDevOutput;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
    process.exit(1);
}

const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
if (!process.env.HOST) {
    console.log('env.HOST was not provided. localhost will be used');
    process.env.HOST = 'localhost';
}
const HOST = process.env.HOST || '0.0.0.0';

// checks that browsers are set in package.json browserslist
//Note: we might not need this or might need to modify the browserlist for production
const { checkBrowsers } = require('react-dev-utils/browsersHelper');
checkBrowsers(paths.appPath, isInteractive)
    .then(() => {
        // We attempt to use the default port but if it is busy, we offer the user to
        // run on a different port. `choosePort()` Promise resolves to the next free port.
        return choosePort(HOST, DEFAULT_PORT);
    })
    .then(port => {
        if (port == null) {
            // We have not found a port.
            return;
        }

        const config = configFactory('development', outputFile);
        const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
        const appName = require(paths.appPackageJson).name;
        const useTypeScript = fs.existsSync(paths.appTsConfig);
        const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';
        const urls = prepareUrls(protocol, HOST, port, paths.publicUrlOrPath.slice(0, -1));

        // Create a webpack compiler that is configured with custom messages.
        const compiler = createCompiler({
            appName,
            config,
            urls,
            useYarn,
            useTypeScript,
            tscCompileOnError,
            webpack
        });

        const devConfig = {
            contentBase: paths.appBuild
        };

        // Serve webpack assets generated by the compiler over a web server.
        const serverConfig = createDevServerConfig(devConfig);

        const devServer = new WebpackDevServer(compiler, serverConfig);

        // Launch WebpackDevServer.
        devServer.listen(port, HOST, err => {
            if (err) {
                return console.log(err);
            }
            if (isInteractive) {
                clearConsole();
            }

            console.log(chalk.magenta('Starting the development server...\n'));
            openBrowser(urls.localUrlForBrowser);
        });

        if (isInteractive || process.env.CI !== 'true') {
            // Gracefully exit when stdin ends
            process.stdin.on('end', function () {
                devServer.close();
                process.exit();
            });
            process.stdin.resume();
        }

        // override react-dev-utils instructions
        setTimeout(printInstructions, 30000);
    })
    .catch(err => {
        if (err && err.message) {
            console.log(err.message);
        }
        process.exit(1);
    });

function printInstructions() {
    console.log(
        chalk.magenta(
            `Edit: To Create a production build, use ${chalk.cyan(`yarn start build`)} or ${chalk.cyan(
                `yarn start build.fast`
            )}`
        )
    );
}
